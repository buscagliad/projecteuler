#include <cstdio>
#include "poly.h"
#include "sequence.h"

// this is the kth order lagrangian polynomial evaluated an k+1
// for the jth term
 /*
long lag(long j, long k)
{
	long num = fact(k);
	long denom = fact(j) * fact(k-j);
	long sgn = (k-j)%2 == 0 ? 1 : -1;
	long res = num / denom * sgn;
	if (res * denom == sgn * num)
		printf("GOOD::  ");
	else
	    printf(" BAD::  ");
	printf("j = %ld  k = %ld  num = %ld  denom = %ld  sgn = %ld  ans = %ld\n", j, k, num, denom, sgn, res);
	return res;
}
*/

// this is the Nth order lagrangian polynomial evaluated an N+1
// for the jth term
long lag(long j, long N)
{
	long num = 1;
	long denom = 1;
	for (long k = 1; k <= N; k++)
	{
		if (k == j) continue;
		num *= (N + 1 - k);
		denom *= (j - k);
	}
	long res = num / denom;
	if (res * denom == num)
		printf("GOOD::  ");
	else
	    printf(" BAD::  ");
	printf("j = %ld  N = %ld  num = %ld  denom = %ld   ans = %ld\n", j, N, num, denom, res);
	return res;
}

long f(long n)
{
	return n * n * n;
}

void test()
{
	long fitsum = 0;
	for (long N = 1; N <= 3; N++)
	{
		long value = 0;
		for (long j = 1; j <= N; j++)
		{
			long fn = f(j);
			printf("fn(%ld)   %ld\n", j, fn);
			value += fn * lag(j, N);
		}
		printf("Value: %ld\n", value);
		fitsum += value;
	}
	printf("Sum of FITs generated by the BOPs is %ld\n", fitsum);
}

void test2()
{
	long	c[] = { 1,-1, 1,-1, 1,-1, 1,-1, 1 ,-1, 1};
	poly<long> U(c, 11);
	
	for (int i = 1; i <=10; i++)
	{
		printf ("U(%d) = %ld\n", i, U.eval(i));
	}

	long fitsum = 0;
	for (long N = 1; N <= 10; N++)
	{
		long value = 0;
		for (long j = 1; j <= N; j++)
		{
			long fn = U.eval(j);
			printf("fn(%ld)   %ld\n", j, fn);
			value += fn * lag(j, N);
		}
		printf("Value: %ld\n", value);
		fitsum += value;
	}
	printf("Sum of FITs generated by the BOPs is %ld\n", fitsum);
}

int main()
{
	test();
	test2();
	return 1;
	long	c[] = { 1,-1, 1,-1, 1,-1, 1,-1, 1 ,-1, 1};
	poly<long> U(c, 11);
	
	for (int i = 1; i <=10; i++)
	{
		printf ("U(%d) = %ld\n", i, U.eval(i));
	}
	for (long k = 1; k <= 10; k++)
	{
		for (long j = 1; j <= k; j++)
		{
			lag(j, k);
		}
	}
	
		
}
//x^10-x^9+x^8-x^7+x^6-x^5+x^4-x^3+x^2-x+1=0
